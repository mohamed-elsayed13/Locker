
Locker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  000007a4  00000838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000c4  008000c4  0000089c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001349  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d10  00000000  00000000  0000262b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  0000333c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082b  00000000  00000000  000038e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000410b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3d       	cpi	r26, 0xD0	; 208
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 99 03 	call	0x732	; 0x732 <main>
  8a:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_read>:
* Purpose      : Read data from EEPROM location
* Parameters   : uint16_t location (as locations from 0 to 1023)
* Return value : uint8_t data (as any location in EEPROM consist of 8 bits) 
*****************************************************************************/
uint8_t EEPROM_read(uint16_t location){
	while(GETBIT(EECR,EEWE)==1){}
  92:	e1 99       	sbic	0x1c, 1	; 28
  94:	fe cf       	rjmp	.-4      	; 0x92 <EEPROM_read>
	EEAR = location;
  96:	9f bb       	out	0x1f, r25	; 31
  98:	8e bb       	out	0x1e, r24	; 30
	SETBIT(EECR,EERE);
  9a:	8c b3       	in	r24, 0x1c	; 28
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
  a0:	8d b3       	in	r24, 0x1d	; 29
}
  a2:	08 95       	ret

000000a4 <EEPROM_write>:
* Purpose      : store data in EEPROM location
* Parameters   : uint16_t location & uint8_t data
* Return value : void
*****************************************************************************/
void EEPROM_write(uint16_t location,uint8_t data){
	while(GETBIT(EECR,EEWE)==1){}
  a4:	e1 99       	sbic	0x1c, 1	; 28
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <EEPROM_write>
	EEAR = location;
  a8:	9f bb       	out	0x1f, r25	; 31
  aa:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
  ac:	6d bb       	out	0x1d, r22	; 29
	SETBIT(EECR,EEMWE);
  ae:	8c b3       	in	r24, 0x1c	; 28
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	8c bb       	out	0x1c, r24	; 28
	SETBIT(EECR,EEWE);	
  b4:	8c b3       	in	r24, 0x1c	; 28
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	8c bb       	out	0x1c, r24	; 28
  ba:	08 95       	ret

000000bc <KEYPAD_init>:
* Purpose      : PotrB Pins from 4 to 7 pull up input & PortD Pins (2 to 5) output
* Parameters   : void
* Return value : void
*****************************************************************************/
void KEYPAD_init(void){
	INIT_KEYPAD_PINS
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	8c 63       	ori	r24, 0x3C	; 60
  c0:	81 bb       	out	0x11, r24	; 17
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	87 bb       	out	0x17, r24	; 23
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	80 6f       	ori	r24, 0xF0	; 240
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	08 95       	ret

000000d0 <KEYPAD_read>:
* Function Name: KEYPAD_read
* Purpose      : Read data from Keypad
* Parameters   : void
* Return value : Ascii symbol from matrix array of keypad
*****************************************************************************/
uint8_t KEYPAD_read(void){
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	60 97       	sbiw	r28, 0x10	; 16
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
	const uint8_t keypad_matrix[]={'7','8','9','/',
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	e0 e6       	ldi	r30, 0x60	; 96
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	de 01       	movw	r26, r28
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	01 90       	ld	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	8a 95       	dec	r24
  f4:	e1 f7       	brne	.-8      	; 0xee <KEYPAD_read+0x1e>
								   '4','5','6','*',
								   '1','2','3','-',
								   'c','0','=','+'};

	int i;
	for(i=0;i<4;i++){
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	5a c0       	rjmp	.+180    	; 0x1b0 <KEYPAD_read+0xe0>
	K2(i>0); K3(1>i); K4(2>i); K5(3>i);
  fc:	18 16       	cp	r1, r24
  fe:	19 06       	cpc	r1, r25
 100:	24 f4       	brge	.+8      	; 0x10a <KEYPAD_read+0x3a>
 102:	22 b3       	in	r18, 0x12	; 18
 104:	24 60       	ori	r18, 0x04	; 4
 106:	22 bb       	out	0x12, r18	; 18
 108:	03 c0       	rjmp	.+6      	; 0x110 <KEYPAD_read+0x40>
 10a:	22 b3       	in	r18, 0x12	; 18
 10c:	2b 7f       	andi	r18, 0xFB	; 251
 10e:	22 bb       	out	0x12, r18	; 18
 110:	18 16       	cp	r1, r24
 112:	19 06       	cpc	r1, r25
 114:	24 f0       	brlt	.+8      	; 0x11e <KEYPAD_read+0x4e>
 116:	22 b3       	in	r18, 0x12	; 18
 118:	28 60       	ori	r18, 0x08	; 8
 11a:	22 bb       	out	0x12, r18	; 18
 11c:	03 c0       	rjmp	.+6      	; 0x124 <KEYPAD_read+0x54>
 11e:	22 b3       	in	r18, 0x12	; 18
 120:	27 7f       	andi	r18, 0xF7	; 247
 122:	22 bb       	out	0x12, r18	; 18
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	91 05       	cpc	r25, r1
 128:	24 f4       	brge	.+8      	; 0x132 <KEYPAD_read+0x62>
 12a:	22 b3       	in	r18, 0x12	; 18
 12c:	20 61       	ori	r18, 0x10	; 16
 12e:	22 bb       	out	0x12, r18	; 18
 130:	03 c0       	rjmp	.+6      	; 0x138 <KEYPAD_read+0x68>
 132:	22 b3       	in	r18, 0x12	; 18
 134:	2f 7e       	andi	r18, 0xEF	; 239
 136:	22 bb       	out	0x12, r18	; 18
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	91 05       	cpc	r25, r1
 13c:	24 f4       	brge	.+8      	; 0x146 <KEYPAD_read+0x76>
 13e:	22 b3       	in	r18, 0x12	; 18
 140:	20 62       	ori	r18, 0x20	; 32
 142:	22 bb       	out	0x12, r18	; 18
 144:	03 c0       	rjmp	.+6      	; 0x14c <KEYPAD_read+0x7c>
 146:	22 b3       	in	r18, 0x12	; 18
 148:	2f 7d       	andi	r18, 0xDF	; 223
 14a:	22 bb       	out	0x12, r18	; 18
	if(B4==0) return keypad_matrix[i+0];
 14c:	b4 99       	sbic	0x16, 4	; 22
 14e:	08 c0       	rjmp	.+16     	; 0x160 <KEYPAD_read+0x90>
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ec 0f       	add	r30, r28
 156:	fd 1f       	adc	r31, r29
 158:	e8 0f       	add	r30, r24
 15a:	f9 1f       	adc	r31, r25
 15c:	80 81       	ld	r24, Z
 15e:	2d c0       	rjmp	.+90     	; 0x1ba <KEYPAD_read+0xea>
	if(B5==0) return keypad_matrix[i+4];
 160:	b5 99       	sbic	0x16, 5	; 22
 162:	09 c0       	rjmp	.+18     	; 0x176 <KEYPAD_read+0xa6>
 164:	04 96       	adiw	r24, 0x04	; 4
 166:	e1 e0       	ldi	r30, 0x01	; 1
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ec 0f       	add	r30, r28
 16c:	fd 1f       	adc	r31, r29
 16e:	e8 0f       	add	r30, r24
 170:	f9 1f       	adc	r31, r25
 172:	80 81       	ld	r24, Z
 174:	22 c0       	rjmp	.+68     	; 0x1ba <KEYPAD_read+0xea>
	if(B6==0) return keypad_matrix[i+8];
 176:	b6 99       	sbic	0x16, 6	; 22
 178:	09 c0       	rjmp	.+18     	; 0x18c <KEYPAD_read+0xbc>
 17a:	08 96       	adiw	r24, 0x08	; 8
 17c:	e1 e0       	ldi	r30, 0x01	; 1
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ec 0f       	add	r30, r28
 182:	fd 1f       	adc	r31, r29
 184:	e8 0f       	add	r30, r24
 186:	f9 1f       	adc	r31, r25
 188:	80 81       	ld	r24, Z
 18a:	17 c0       	rjmp	.+46     	; 0x1ba <KEYPAD_read+0xea>
	if(B7==0) return keypad_matrix[i+12];
 18c:	b7 99       	sbic	0x16, 7	; 22
 18e:	09 c0       	rjmp	.+18     	; 0x1a2 <KEYPAD_read+0xd2>
 190:	0c 96       	adiw	r24, 0x0c	; 12
 192:	e1 e0       	ldi	r30, 0x01	; 1
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	ec 0f       	add	r30, r28
 198:	fd 1f       	adc	r31, r29
 19a:	e8 0f       	add	r30, r24
 19c:	f9 1f       	adc	r31, r25
 19e:	80 81       	ld	r24, Z
 1a0:	0c c0       	rjmp	.+24     	; 0x1ba <KEYPAD_read+0xea>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	ef e9       	ldi	r30, 0x9F	; 159
 1a4:	ff e0       	ldi	r31, 0x0F	; 15
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <KEYPAD_read+0xd6>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <KEYPAD_read+0xdc>
 1ac:	00 00       	nop
								   '4','5','6','*',
								   '1','2','3','-',
								   'c','0','=','+'};

	int i;
	for(i=0;i<4;i++){
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	84 30       	cpi	r24, 0x04	; 4
 1b2:	91 05       	cpc	r25, r1
 1b4:	0c f4       	brge	.+2      	; 0x1b8 <KEYPAD_read+0xe8>
 1b6:	a2 cf       	rjmp	.-188    	; 0xfc <KEYPAD_read+0x2c>
	if(B5==0) return keypad_matrix[i+4];
	if(B6==0) return keypad_matrix[i+8];
	if(B7==0) return keypad_matrix[i+12];
	_delay_ms(1);
	}
	return 0;
 1b8:	80 e0       	ldi	r24, 0x00	; 0
	
}
 1ba:	60 96       	adiw	r28, 0x10	; 16
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <LCD_write_command>:
* Purpose      : Write command to LCD
* Parameters   : data : one of LCD commands
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8_t data){
	RS(0);
 1cc:	9b b3       	in	r25, 0x1b	; 27
 1ce:	9d 7f       	andi	r25, 0xFD	; 253
 1d0:	9b bb       	out	0x1b, r25	; 27
	D7(GETBIT(data,7));
 1d2:	88 23       	and	r24, r24
 1d4:	24 f4       	brge	.+8      	; 0x1de <LCD_write_command+0x12>
 1d6:	9b b3       	in	r25, 0x1b	; 27
 1d8:	90 64       	ori	r25, 0x40	; 64
 1da:	9b bb       	out	0x1b, r25	; 27
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <LCD_write_command+0x18>
 1de:	9b b3       	in	r25, 0x1b	; 27
 1e0:	9f 7b       	andi	r25, 0xBF	; 191
 1e2:	9b bb       	out	0x1b, r25	; 27
	D6(GETBIT(data,6));
 1e4:	86 ff       	sbrs	r24, 6
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <LCD_write_command+0x24>
 1e8:	9b b3       	in	r25, 0x1b	; 27
 1ea:	90 62       	ori	r25, 0x20	; 32
 1ec:	9b bb       	out	0x1b, r25	; 27
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <LCD_write_command+0x2a>
 1f0:	9b b3       	in	r25, 0x1b	; 27
 1f2:	9f 7d       	andi	r25, 0xDF	; 223
 1f4:	9b bb       	out	0x1b, r25	; 27
	D5(GETBIT(data,5));
 1f6:	85 ff       	sbrs	r24, 5
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <LCD_write_command+0x36>
 1fa:	9b b3       	in	r25, 0x1b	; 27
 1fc:	90 61       	ori	r25, 0x10	; 16
 1fe:	9b bb       	out	0x1b, r25	; 27
 200:	03 c0       	rjmp	.+6      	; 0x208 <LCD_write_command+0x3c>
 202:	9b b3       	in	r25, 0x1b	; 27
 204:	9f 7e       	andi	r25, 0xEF	; 239
 206:	9b bb       	out	0x1b, r25	; 27
	D4(GETBIT(data,4));
 208:	84 ff       	sbrs	r24, 4
 20a:	04 c0       	rjmp	.+8      	; 0x214 <LCD_write_command+0x48>
 20c:	9b b3       	in	r25, 0x1b	; 27
 20e:	98 60       	ori	r25, 0x08	; 8
 210:	9b bb       	out	0x1b, r25	; 27
 212:	03 c0       	rjmp	.+6      	; 0x21a <LCD_write_command+0x4e>
 214:	9b b3       	in	r25, 0x1b	; 27
 216:	97 7f       	andi	r25, 0xF7	; 247
 218:	9b bb       	out	0x1b, r25	; 27
	EN(1);
 21a:	9b b3       	in	r25, 0x1b	; 27
 21c:	94 60       	ori	r25, 0x04	; 4
 21e:	9b bb       	out	0x1b, r25	; 27
 220:	ef e9       	ldi	r30, 0x9F	; 159
 222:	ff e0       	ldi	r31, 0x0F	; 15
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_write_command+0x58>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_write_command+0x5e>
 22a:	00 00       	nop
	_delay_ms(1);
	EN(0);
 22c:	9b b3       	in	r25, 0x1b	; 27
 22e:	9b 7f       	andi	r25, 0xFB	; 251
 230:	9b bb       	out	0x1b, r25	; 27
 232:	ef e9       	ldi	r30, 0x9F	; 159
 234:	ff e0       	ldi	r31, 0x0F	; 15
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_write_command+0x6a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_write_command+0x70>
 23c:	00 00       	nop
	_delay_ms(1);
	D7(GETBIT(data,3));
 23e:	83 ff       	sbrs	r24, 3
 240:	04 c0       	rjmp	.+8      	; 0x24a <LCD_write_command+0x7e>
 242:	9b b3       	in	r25, 0x1b	; 27
 244:	90 64       	ori	r25, 0x40	; 64
 246:	9b bb       	out	0x1b, r25	; 27
 248:	03 c0       	rjmp	.+6      	; 0x250 <LCD_write_command+0x84>
 24a:	9b b3       	in	r25, 0x1b	; 27
 24c:	9f 7b       	andi	r25, 0xBF	; 191
 24e:	9b bb       	out	0x1b, r25	; 27
	D6(GETBIT(data,2));
 250:	82 ff       	sbrs	r24, 2
 252:	04 c0       	rjmp	.+8      	; 0x25c <LCD_write_command+0x90>
 254:	9b b3       	in	r25, 0x1b	; 27
 256:	90 62       	ori	r25, 0x20	; 32
 258:	9b bb       	out	0x1b, r25	; 27
 25a:	03 c0       	rjmp	.+6      	; 0x262 <LCD_write_command+0x96>
 25c:	9b b3       	in	r25, 0x1b	; 27
 25e:	9f 7d       	andi	r25, 0xDF	; 223
 260:	9b bb       	out	0x1b, r25	; 27
	D5(GETBIT(data,1));
 262:	81 ff       	sbrs	r24, 1
 264:	04 c0       	rjmp	.+8      	; 0x26e <LCD_write_command+0xa2>
 266:	9b b3       	in	r25, 0x1b	; 27
 268:	90 61       	ori	r25, 0x10	; 16
 26a:	9b bb       	out	0x1b, r25	; 27
 26c:	03 c0       	rjmp	.+6      	; 0x274 <LCD_write_command+0xa8>
 26e:	9b b3       	in	r25, 0x1b	; 27
 270:	9f 7e       	andi	r25, 0xEF	; 239
 272:	9b bb       	out	0x1b, r25	; 27
	D4(GETBIT(data,0));
 274:	80 ff       	sbrs	r24, 0
 276:	04 c0       	rjmp	.+8      	; 0x280 <LCD_write_command+0xb4>
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	88 60       	ori	r24, 0x08	; 8
 27c:	8b bb       	out	0x1b, r24	; 27
 27e:	03 c0       	rjmp	.+6      	; 0x286 <LCD_write_command+0xba>
 280:	8b b3       	in	r24, 0x1b	; 27
 282:	87 7f       	andi	r24, 0xF7	; 247
 284:	8b bb       	out	0x1b, r24	; 27
	EN(1);
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	84 60       	ori	r24, 0x04	; 4
 28a:	8b bb       	out	0x1b, r24	; 27
 28c:	8f e9       	ldi	r24, 0x9F	; 159
 28e:	9f e0       	ldi	r25, 0x0F	; 15
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCD_write_command+0xc4>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_write_command+0xca>
 296:	00 00       	nop
	_delay_ms(1);
	EN(0);
 298:	8b b3       	in	r24, 0x1b	; 27
 29a:	8b 7f       	andi	r24, 0xFB	; 251
 29c:	8b bb       	out	0x1b, r24	; 27
 29e:	ef e9       	ldi	r30, 0x9F	; 159
 2a0:	ff e0       	ldi	r31, 0x0F	; 15
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_write_command+0xd6>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_write_command+0xdc>
 2a8:	00 00       	nop
 2aa:	08 95       	ret

000002ac <LCD_init>:
* Purpose      : Init lcd in 4 bit mode, clear lcd and turn off cursor
* Parameters   : void
* Return value : void
*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PINS;
 2ac:	8a b3       	in	r24, 0x1a	; 26
 2ae:	8e 67       	ori	r24, 0x7E	; 126
 2b0:	8a bb       	out	0x1a, r24	; 26
	LCD_write_command(0x3);
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
 2b8:	8f e7       	ldi	r24, 0x7F	; 127
 2ba:	9e e3       	ldi	r25, 0x3E	; 62
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_init+0x10>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_init+0x16>
 2c2:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
 2ca:	8f e7       	ldi	r24, 0x7F	; 127
 2cc:	9e e3       	ldi	r25, 0x3E	; 62
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_init+0x22>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCD_init+0x28>
 2d4:	00 00       	nop
	_delay_ms(4);	
	LCD_write_command(0x3);
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
 2dc:	8f e7       	ldi	r24, 0x7F	; 127
 2de:	9e e3       	ldi	r25, 0x3E	; 62
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCD_init+0x34>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <LCD_init+0x3a>
 2e6:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x2);
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
	LCD_write_command(0x28);
 2ee:	88 e2       	ldi	r24, 0x28	; 40
 2f0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
	LCD_write_command(0x08);
 2f4:	88 e0       	ldi	r24, 0x08	; 8
 2f6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
	LCD_write_command(0x01);
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
	LCD_write_command(0x06);
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
	LCD_write_command(0x0c);
 306:	8c e0       	ldi	r24, 0x0C	; 12
 308:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
 30c:	9f ef       	ldi	r25, 0xFF	; 255
 30e:	29 ef       	ldi	r18, 0xF9	; 249
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	91 50       	subi	r25, 0x01	; 1
 314:	20 40       	sbci	r18, 0x00	; 0
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <LCD_init+0x66>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_init+0x70>
 31c:	00 00       	nop
 31e:	08 95       	ret

00000320 <LCD_write_char>:
* Purpose      : Write data on LCD
* Parameters   : data : Ascii symbol to be written on LCD
* Return value : void
*****************************************************************************/
void LCD_write_char(uint8_t data){
	RS(1);
 320:	9b b3       	in	r25, 0x1b	; 27
 322:	92 60       	ori	r25, 0x02	; 2
 324:	9b bb       	out	0x1b, r25	; 27
	D7(GETBIT(data,7));
 326:	88 23       	and	r24, r24
 328:	24 f4       	brge	.+8      	; 0x332 <LCD_write_char+0x12>
 32a:	9b b3       	in	r25, 0x1b	; 27
 32c:	90 64       	ori	r25, 0x40	; 64
 32e:	9b bb       	out	0x1b, r25	; 27
 330:	03 c0       	rjmp	.+6      	; 0x338 <LCD_write_char+0x18>
 332:	9b b3       	in	r25, 0x1b	; 27
 334:	9f 7b       	andi	r25, 0xBF	; 191
 336:	9b bb       	out	0x1b, r25	; 27
	D6(GETBIT(data,6));
 338:	86 ff       	sbrs	r24, 6
 33a:	04 c0       	rjmp	.+8      	; 0x344 <LCD_write_char+0x24>
 33c:	9b b3       	in	r25, 0x1b	; 27
 33e:	90 62       	ori	r25, 0x20	; 32
 340:	9b bb       	out	0x1b, r25	; 27
 342:	03 c0       	rjmp	.+6      	; 0x34a <LCD_write_char+0x2a>
 344:	9b b3       	in	r25, 0x1b	; 27
 346:	9f 7d       	andi	r25, 0xDF	; 223
 348:	9b bb       	out	0x1b, r25	; 27
	D5(GETBIT(data,5));
 34a:	85 ff       	sbrs	r24, 5
 34c:	04 c0       	rjmp	.+8      	; 0x356 <LCD_write_char+0x36>
 34e:	9b b3       	in	r25, 0x1b	; 27
 350:	90 61       	ori	r25, 0x10	; 16
 352:	9b bb       	out	0x1b, r25	; 27
 354:	03 c0       	rjmp	.+6      	; 0x35c <LCD_write_char+0x3c>
 356:	9b b3       	in	r25, 0x1b	; 27
 358:	9f 7e       	andi	r25, 0xEF	; 239
 35a:	9b bb       	out	0x1b, r25	; 27
	D4(GETBIT(data,4));
 35c:	84 ff       	sbrs	r24, 4
 35e:	04 c0       	rjmp	.+8      	; 0x368 <LCD_write_char+0x48>
 360:	9b b3       	in	r25, 0x1b	; 27
 362:	98 60       	ori	r25, 0x08	; 8
 364:	9b bb       	out	0x1b, r25	; 27
 366:	03 c0       	rjmp	.+6      	; 0x36e <LCD_write_char+0x4e>
 368:	9b b3       	in	r25, 0x1b	; 27
 36a:	97 7f       	andi	r25, 0xF7	; 247
 36c:	9b bb       	out	0x1b, r25	; 27
	EN(1);
 36e:	9b b3       	in	r25, 0x1b	; 27
 370:	94 60       	ori	r25, 0x04	; 4
 372:	9b bb       	out	0x1b, r25	; 27
 374:	ef e9       	ldi	r30, 0x9F	; 159
 376:	ff e0       	ldi	r31, 0x0F	; 15
 378:	31 97       	sbiw	r30, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <LCD_write_char+0x58>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_write_char+0x5e>
 37e:	00 00       	nop
	_delay_ms(1);
	EN(0);
 380:	9b b3       	in	r25, 0x1b	; 27
 382:	9b 7f       	andi	r25, 0xFB	; 251
 384:	9b bb       	out	0x1b, r25	; 27
 386:	ef e9       	ldi	r30, 0x9F	; 159
 388:	ff e0       	ldi	r31, 0x0F	; 15
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_write_char+0x6a>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_write_char+0x70>
 390:	00 00       	nop
	_delay_ms(1);
	D7(GETBIT(data,3));
 392:	83 ff       	sbrs	r24, 3
 394:	04 c0       	rjmp	.+8      	; 0x39e <LCD_write_char+0x7e>
 396:	9b b3       	in	r25, 0x1b	; 27
 398:	90 64       	ori	r25, 0x40	; 64
 39a:	9b bb       	out	0x1b, r25	; 27
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <LCD_write_char+0x84>
 39e:	9b b3       	in	r25, 0x1b	; 27
 3a0:	9f 7b       	andi	r25, 0xBF	; 191
 3a2:	9b bb       	out	0x1b, r25	; 27
	D6(GETBIT(data,2));
 3a4:	82 ff       	sbrs	r24, 2
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <LCD_write_char+0x90>
 3a8:	9b b3       	in	r25, 0x1b	; 27
 3aa:	90 62       	ori	r25, 0x20	; 32
 3ac:	9b bb       	out	0x1b, r25	; 27
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <LCD_write_char+0x96>
 3b0:	9b b3       	in	r25, 0x1b	; 27
 3b2:	9f 7d       	andi	r25, 0xDF	; 223
 3b4:	9b bb       	out	0x1b, r25	; 27
	D5(GETBIT(data,1));
 3b6:	81 ff       	sbrs	r24, 1
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <LCD_write_char+0xa2>
 3ba:	9b b3       	in	r25, 0x1b	; 27
 3bc:	90 61       	ori	r25, 0x10	; 16
 3be:	9b bb       	out	0x1b, r25	; 27
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <LCD_write_char+0xa8>
 3c2:	9b b3       	in	r25, 0x1b	; 27
 3c4:	9f 7e       	andi	r25, 0xEF	; 239
 3c6:	9b bb       	out	0x1b, r25	; 27
	D4(GETBIT(data,0));
 3c8:	80 ff       	sbrs	r24, 0
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <LCD_write_char+0xb4>
 3cc:	8b b3       	in	r24, 0x1b	; 27
 3ce:	88 60       	ori	r24, 0x08	; 8
 3d0:	8b bb       	out	0x1b, r24	; 27
 3d2:	03 c0       	rjmp	.+6      	; 0x3da <LCD_write_char+0xba>
 3d4:	8b b3       	in	r24, 0x1b	; 27
 3d6:	87 7f       	andi	r24, 0xF7	; 247
 3d8:	8b bb       	out	0x1b, r24	; 27
	EN(1);
 3da:	8b b3       	in	r24, 0x1b	; 27
 3dc:	84 60       	ori	r24, 0x04	; 4
 3de:	8b bb       	out	0x1b, r24	; 27
 3e0:	8f e9       	ldi	r24, 0x9F	; 159
 3e2:	9f e0       	ldi	r25, 0x0F	; 15
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <LCD_write_char+0xc4>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <LCD_write_char+0xca>
 3ea:	00 00       	nop
	_delay_ms(1);
	EN(0);
 3ec:	8b b3       	in	r24, 0x1b	; 27
 3ee:	8b 7f       	andi	r24, 0xFB	; 251
 3f0:	8b bb       	out	0x1b, r24	; 27
 3f2:	ef e9       	ldi	r30, 0x9F	; 159
 3f4:	ff e0       	ldi	r31, 0x0F	; 15
 3f6:	31 97       	sbiw	r30, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_write_char+0xd6>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_write_char+0xdc>
 3fc:	00 00       	nop
 3fe:	08 95       	ret

00000400 <LCD_write_string>:
* Function Name: LCD_write_string
* Purpose      : Write string on LCD
* Parameters   : *data : array of chars to be written on LCD
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t* data){
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	8c 01       	movw	r16, r24
	uint8_t i=0;
 408:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i]!='\0'){
 40a:	03 c0       	rjmp	.+6      	; 0x412 <LCD_write_string+0x12>
		LCD_write_char(data[i]);
 40c:	0e 94 90 01 	call	0x320	; 0x320 <LCD_write_char>
		i++;
 410:	cf 5f       	subi	r28, 0xFF	; 255
* Parameters   : *data : array of chars to be written on LCD
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t* data){
	uint8_t i=0;
	while(data[i]!='\0'){
 412:	f8 01       	movw	r30, r16
 414:	ec 0f       	add	r30, r28
 416:	f1 1d       	adc	r31, r1
 418:	80 81       	ld	r24, Z
 41a:	81 11       	cpse	r24, r1
 41c:	f7 cf       	rjmp	.-18     	; 0x40c <LCD_write_string+0xc>
		LCD_write_char(data[i]);
		i++;
	}
}
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	08 95       	ret

00000426 <check_password>:
			digit_flag=0;
		}
		break;
	}
	}
void check_password(void){
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
	if(digit_flag==4){
 42a:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <digit_flag>
 42e:	84 30       	cpi	r24, 0x04	; 4
 430:	09 f0       	breq	.+2      	; 0x434 <check_password+0xe>
 432:	5e c0       	rjmp	.+188    	; 0x4f0 <check_password+0xca>
		if (password[0]-48==EEPROM_read(50) && password[1]-48==EEPROM_read(51) && password[2]- 48==EEPROM_read(52) && password[3]- 48==EEPROM_read(53)){
 434:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <password>
 438:	d0 e0       	ldi	r29, 0x00	; 0
 43a:	e0 97       	sbiw	r28, 0x30	; 48
 43c:	82 e3       	ldi	r24, 0x32	; 50
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	c8 17       	cp	r28, r24
 448:	d9 07       	cpc	r29, r25
 44a:	a1 f5       	brne	.+104    	; 0x4b4 <check_password+0x8e>
 44c:	c0 91 c7 00 	lds	r28, 0x00C7	; 0x8000c7 <password+0x1>
 450:	d0 e0       	ldi	r29, 0x00	; 0
 452:	e0 97       	sbiw	r28, 0x30	; 48
 454:	83 e3       	ldi	r24, 0x33	; 51
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	c8 17       	cp	r28, r24
 460:	d9 07       	cpc	r29, r25
 462:	41 f5       	brne	.+80     	; 0x4b4 <check_password+0x8e>
 464:	c0 91 c8 00 	lds	r28, 0x00C8	; 0x8000c8 <password+0x2>
 468:	d0 e0       	ldi	r29, 0x00	; 0
 46a:	e0 97       	sbiw	r28, 0x30	; 48
 46c:	84 e3       	ldi	r24, 0x34	; 52
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	c8 17       	cp	r28, r24
 478:	d9 07       	cpc	r29, r25
 47a:	e1 f4       	brne	.+56     	; 0x4b4 <check_password+0x8e>
 47c:	c0 91 c9 00 	lds	r28, 0x00C9	; 0x8000c9 <password+0x3>
 480:	d0 e0       	ldi	r29, 0x00	; 0
 482:	e0 97       	sbiw	r28, 0x30	; 48
 484:	85 e3       	ldi	r24, 0x35	; 53
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_read>
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	c8 17       	cp	r28, r24
 490:	d9 07       	cpc	r29, r25
 492:	81 f4       	brne	.+32     	; 0x4b4 <check_password+0x8e>
			SETBIT(PORTC,1);
 494:	85 b3       	in	r24, 0x15	; 21
 496:	82 60       	ori	r24, 0x02	; 2
 498:	85 bb       	out	0x15, r24	; 21
			LCD_write_command(0x1);
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
			LCD_write_command(0x80);
 4a0:	80 e8       	ldi	r24, 0x80	; 128
 4a2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
			LCD_write_string("Locker is open");
 4a6:	80 e7       	ldi	r24, 0x70	; 112
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 00 02 	call	0x400	; 0x400 <LCD_write_string>
			digit_flag=0;
 4ae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <digit_flag>
 4b2:	1e c0       	rjmp	.+60     	; 0x4f0 <check_password+0xca>
		}
		else{
			LCD_write_command(0x1);
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
			LCD_write_command(0x80);
 4ba:	80 e8       	ldi	r24, 0x80	; 128
 4bc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
			LCD_write_string("Wrong, try again!");
 4c0:	8f e7       	ldi	r24, 0x7F	; 127
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 00 02 	call	0x400	; 0x400 <LCD_write_string>
			SETBIT(PORTC,0);
 4c8:	85 b3       	in	r24, 0x15	; 21
 4ca:	81 60       	ori	r24, 0x01	; 1
 4cc:	85 bb       	out	0x15, r24	; 21
 4ce:	2f ef       	ldi	r18, 0xFF	; 255
 4d0:	8b e7       	ldi	r24, 0x7B	; 123
 4d2:	92 e9       	ldi	r25, 0x92	; 146
 4d4:	21 50       	subi	r18, 0x01	; 1
 4d6:	80 40       	sbci	r24, 0x00	; 0
 4d8:	90 40       	sbci	r25, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <check_password+0xae>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <check_password+0xb8>
 4de:	00 00       	nop
			_delay_ms(3000);
			CLRBIT(PORTC,0);
 4e0:	85 b3       	in	r24, 0x15	; 21
 4e2:	8e 7f       	andi	r24, 0xFE	; 254
 4e4:	85 bb       	out	0x15, r24	; 21
			LCD_write_command(0xc0);
 4e6:	80 ec       	ldi	r24, 0xC0	; 192
 4e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
			digit_flag=0;
 4ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <digit_flag>
		}
	}
}
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <check_reset>:
void check_reset(void){
	uint8_t i;
	for(uint8_t i=0;i<10;i++){
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	0b c0       	rjmp	.+22     	; 0x510 <check_reset+0x1a>
	if(password[i]-48==0){}
 4fa:	e8 2f       	mov	r30, r24
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	ea 53       	subi	r30, 0x3A	; 58
 500:	ff 4f       	sbci	r31, 0xFF	; 255
 502:	90 81       	ld	r25, Z
 504:	90 33       	cpi	r25, 0x30	; 48
 506:	19 f0       	breq	.+6      	; 0x50e <check_reset+0x18>
	else{
		digit_flag=0;
 508:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <digit_flag>
		break;
 50c:	03 c0       	rjmp	.+6      	; 0x514 <check_reset+0x1e>
		}
	}
}
void check_reset(void){
	uint8_t i;
	for(uint8_t i=0;i<10;i++){
 50e:	8f 5f       	subi	r24, 0xFF	; 255
 510:	8a 30       	cpi	r24, 0x0A	; 10
 512:	98 f3       	brcs	.-26     	; 0x4fa <check_reset+0x4>
	else{
		digit_flag=0;
		break;
	}
	}
	if(digit_flag!=0){
 514:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <digit_flag>
 518:	88 23       	and	r24, r24
 51a:	01 f1       	breq	.+64     	; 0x55c <check_reset+0x66>
		EEPROM_write(50,0);
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	82 e3       	ldi	r24, 0x32	; 50
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 52 00 	call	0xa4	; 0xa4 <EEPROM_write>
		EEPROM_write(51,0);
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	83 e3       	ldi	r24, 0x33	; 51
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 52 00 	call	0xa4	; 0xa4 <EEPROM_write>
		EEPROM_write(52,0);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	84 e3       	ldi	r24, 0x34	; 52
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 52 00 	call	0xa4	; 0xa4 <EEPROM_write>
		EEPROM_write(53,0);
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	85 e3       	ldi	r24, 0x35	; 53
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 52 00 	call	0xa4	; 0xa4 <EEPROM_write>
		LCD_write_command(0x1);
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
		LCD_write_string("Password Changed");
 54a:	81 e9       	ldi	r24, 0x91	; 145
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 00 02 	call	0x400	; 0x400 <LCD_write_string>
		LCD_write_command(0xc0);
 552:	80 ec       	ldi	r24, 0xC0	; 192
 554:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
		digit_flag=0;
 558:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <digit_flag>
 55c:	08 95       	ret

0000055e <read_digit>:
		}
		
    }
}

void read_digit(void){
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
	switch(KEYPAD_read()){
 562:	0e 94 68 00 	call	0xd0	; 0xd0 <KEYPAD_read>
 566:	8d 32       	cpi	r24, 0x2D	; 45
 568:	09 f4       	brne	.+2      	; 0x56c <read_digit+0xe>
 56a:	e0 c0       	rjmp	.+448    	; 0x72c <read_digit+0x1ce>
 56c:	38 f4       	brcc	.+14     	; 0x57c <read_digit+0x1e>
 56e:	8a 32       	cpi	r24, 0x2A	; 42
 570:	09 f4       	brne	.+2      	; 0x574 <read_digit+0x16>
 572:	61 c0       	rjmp	.+194    	; 0x636 <read_digit+0xd8>
 574:	8b 32       	cpi	r24, 0x2B	; 43
 576:	09 f0       	breq	.+2      	; 0x57a <read_digit+0x1c>
 578:	70 c0       	rjmp	.+224    	; 0x65a <read_digit+0xfc>
 57a:	d8 c0       	rjmp	.+432    	; 0x72c <read_digit+0x1ce>
 57c:	8d 33       	cpi	r24, 0x3D	; 61
 57e:	09 f4       	brne	.+2      	; 0x582 <read_digit+0x24>
 580:	d5 c0       	rjmp	.+426    	; 0x72c <read_digit+0x1ce>
 582:	83 36       	cpi	r24, 0x63	; 99
 584:	09 f4       	brne	.+2      	; 0x588 <read_digit+0x2a>
 586:	d2 c0       	rjmp	.+420    	; 0x72c <read_digit+0x1ce>
 588:	8f 32       	cpi	r24, 0x2F	; 47
 58a:	09 f0       	breq	.+2      	; 0x58e <read_digit+0x30>
 58c:	66 c0       	rjmp	.+204    	; 0x65a <read_digit+0xfc>
		case '+':
		break;
		case '-':
		break;
		case '/':
		if(change_flag==0){
 58e:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 592:	81 11       	cpse	r24, r1
 594:	24 c0       	rjmp	.+72     	; 0x5de <read_digit+0x80>
		SETBIT(PORTC,0);
 596:	85 b3       	in	r24, 0x15	; 21
 598:	81 60       	ori	r24, 0x01	; 1
 59a:	85 bb       	out	0x15, r24	; 21
 59c:	2f ef       	ldi	r18, 0xFF	; 255
 59e:	8b e7       	ldi	r24, 0x7B	; 123
 5a0:	92 e9       	ldi	r25, 0x92	; 146
 5a2:	21 50       	subi	r18, 0x01	; 1
 5a4:	80 40       	sbci	r24, 0x00	; 0
 5a6:	90 40       	sbci	r25, 0x00	; 0
 5a8:	e1 f7       	brne	.-8      	; 0x5a2 <read_digit+0x44>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <read_digit+0x4e>
 5ac:	00 00       	nop
		_delay_ms(3000);
		CLRBIT(PORTC,0);
 5ae:	85 b3       	in	r24, 0x15	; 21
 5b0:	8e 7f       	andi	r24, 0xFE	; 254
 5b2:	85 bb       	out	0x15, r24	; 21
		LCD_write_command(0x1);
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
		LCD_write_command(0x80);
 5ba:	80 e8       	ldi	r24, 0x80	; 128
 5bc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
		LCD_write_string("Enter new password");
 5c0:	82 ea       	ldi	r24, 0xA2	; 162
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 00 02 	call	0x400	; 0x400 <LCD_write_string>
		LCD_write_command(0x0c);
 5c8:	8c e0       	ldi	r24, 0x0C	; 12
 5ca:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
		digit_flag=0;
 5ce:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <digit_flag>
		change_flag++;
 5d2:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 5d6:	8f 5f       	subi	r24, 0xFF	; 255
 5d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
 5dc:	a7 c0       	rjmp	.+334    	; 0x72c <read_digit+0x1ce>
		}
		else if(change_flag==1){
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	09 f0       	breq	.+2      	; 0x5e4 <read_digit+0x86>
 5e2:	a4 c0       	rjmp	.+328    	; 0x72c <read_digit+0x1ce>
			EEPROM_write(50,password[0]-48);
 5e4:	c6 ec       	ldi	r28, 0xC6	; 198
 5e6:	d0 e0       	ldi	r29, 0x00	; 0
 5e8:	68 81       	ld	r22, Y
 5ea:	60 53       	subi	r22, 0x30	; 48
 5ec:	82 e3       	ldi	r24, 0x32	; 50
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 52 00 	call	0xa4	; 0xa4 <EEPROM_write>
			EEPROM_write(51,password[1]-48);
 5f4:	69 81       	ldd	r22, Y+1	; 0x01
 5f6:	60 53       	subi	r22, 0x30	; 48
 5f8:	83 e3       	ldi	r24, 0x33	; 51
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 52 00 	call	0xa4	; 0xa4 <EEPROM_write>
			EEPROM_write(52,password[2]-48);
 600:	6a 81       	ldd	r22, Y+2	; 0x02
 602:	60 53       	subi	r22, 0x30	; 48
 604:	84 e3       	ldi	r24, 0x34	; 52
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 52 00 	call	0xa4	; 0xa4 <EEPROM_write>
			EEPROM_write(53,password[3]-48);
 60c:	6b 81       	ldd	r22, Y+3	; 0x03
 60e:	60 53       	subi	r22, 0x30	; 48
 610:	85 e3       	ldi	r24, 0x35	; 53
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 52 00 	call	0xa4	; 0xa4 <EEPROM_write>
			LCD_write_command(0x1);
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
			LCD_write_command(0x80);
 61e:	80 e8       	ldi	r24, 0x80	; 128
 620:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
			LCD_write_string("Password Changed");
 624:	81 e9       	ldi	r24, 0x91	; 145
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 00 02 	call	0x400	; 0x400 <LCD_write_string>
			digit_flag=0;
 62c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <digit_flag>
			change_flag=0;
 630:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__data_end>
 634:	7b c0       	rjmp	.+246    	; 0x72c <read_digit+0x1ce>
		}
		break;
		case '*':		
		if(GETBIT(PORTC,1)==1){	//locker is open
 636:	a9 9b       	sbis	0x15, 1	; 21
 638:	79 c0       	rjmp	.+242    	; 0x72c <read_digit+0x1ce>
		CLRBIT(PORTC,1);
 63a:	85 b3       	in	r24, 0x15	; 21
 63c:	8d 7f       	andi	r24, 0xFD	; 253
 63e:	85 bb       	out	0x15, r24	; 21
		LCD_write_command(0x1);
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
		LCD_write_command(0x80);
 646:	80 e8       	ldi	r24, 0x80	; 128
 648:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
		LCD_write_string("Enter Password");
 64c:	85 eb       	ldi	r24, 0xB5	; 181
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 00 02 	call	0x400	; 0x400 <LCD_write_string>
		digit_flag=0;
 654:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <digit_flag>
 658:	69 c0       	rjmp	.+210    	; 0x72c <read_digit+0x1ce>
		case '=':
		break;
		case 'c':
		break;
		default:
		if(digit_flag==0 && GETBIT(PORTC,1)==0){
 65a:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <digit_flag>
 65e:	81 11       	cpse	r24, r1
 660:	12 c0       	rjmp	.+36     	; 0x686 <read_digit+0x128>
 662:	a9 99       	sbic	0x15, 1	; 21
 664:	10 c0       	rjmp	.+32     	; 0x686 <read_digit+0x128>
			LCD_write_command(0xc0);
 666:	80 ec       	ldi	r24, 0xC0	; 192
 668:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
			LCD_write_char('*');
 66c:	8a e2       	ldi	r24, 0x2A	; 42
 66e:	0e 94 90 01 	call	0x320	; 0x320 <LCD_write_char>
			password[0]=KEYPAD_read();
 672:	0e 94 68 00 	call	0xd0	; 0xd0 <KEYPAD_read>
 676:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <password>
			digit_flag++;
 67a:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <digit_flag>
 67e:	8f 5f       	subi	r24, 0xFF	; 255
 680:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <digit_flag>
 684:	53 c0       	rjmp	.+166    	; 0x72c <read_digit+0x1ce>
		}
		else if(digit_flag==1 && GETBIT(PORTC,1)==0){
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	79 f4       	brne	.+30     	; 0x6a8 <read_digit+0x14a>
 68a:	a9 99       	sbic	0x15, 1	; 21
 68c:	0d c0       	rjmp	.+26     	; 0x6a8 <read_digit+0x14a>
			LCD_write_char('*');
 68e:	8a e2       	ldi	r24, 0x2A	; 42
 690:	0e 94 90 01 	call	0x320	; 0x320 <LCD_write_char>
			password[1]=KEYPAD_read();
 694:	0e 94 68 00 	call	0xd0	; 0xd0 <KEYPAD_read>
 698:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <password+0x1>
			digit_flag++;
 69c:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <digit_flag>
 6a0:	8f 5f       	subi	r24, 0xFF	; 255
 6a2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <digit_flag>
 6a6:	42 c0       	rjmp	.+132    	; 0x72c <read_digit+0x1ce>
		}
		else if(digit_flag==2 && GETBIT(PORTC,1)==0){
 6a8:	82 30       	cpi	r24, 0x02	; 2
 6aa:	79 f4       	brne	.+30     	; 0x6ca <read_digit+0x16c>
 6ac:	a9 99       	sbic	0x15, 1	; 21
 6ae:	0d c0       	rjmp	.+26     	; 0x6ca <read_digit+0x16c>
			LCD_write_char('*');
 6b0:	8a e2       	ldi	r24, 0x2A	; 42
 6b2:	0e 94 90 01 	call	0x320	; 0x320 <LCD_write_char>
			password[2]=KEYPAD_read();
 6b6:	0e 94 68 00 	call	0xd0	; 0xd0 <KEYPAD_read>
 6ba:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <password+0x2>
			digit_flag++;
 6be:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <digit_flag>
 6c2:	8f 5f       	subi	r24, 0xFF	; 255
 6c4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <digit_flag>
 6c8:	31 c0       	rjmp	.+98     	; 0x72c <read_digit+0x1ce>
		}
		else if(digit_flag==3&& GETBIT(PORTC,1)==0){
 6ca:	83 30       	cpi	r24, 0x03	; 3
 6cc:	79 f4       	brne	.+30     	; 0x6ec <read_digit+0x18e>
 6ce:	a9 99       	sbic	0x15, 1	; 21
 6d0:	0d c0       	rjmp	.+26     	; 0x6ec <read_digit+0x18e>
			LCD_write_char('*');
 6d2:	8a e2       	ldi	r24, 0x2A	; 42
 6d4:	0e 94 90 01 	call	0x320	; 0x320 <LCD_write_char>
			password[3]=KEYPAD_read();
 6d8:	0e 94 68 00 	call	0xd0	; 0xd0 <KEYPAD_read>
 6dc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <password+0x3>
			digit_flag++;
 6e0:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <digit_flag>
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <digit_flag>
 6ea:	20 c0       	rjmp	.+64     	; 0x72c <read_digit+0x1ce>
		}
		else if(digit_flag<10 && GETBIT(PORTC,1)==1){
 6ec:	8a 30       	cpi	r24, 0x0A	; 10
 6ee:	c0 f4       	brcc	.+48     	; 0x720 <read_digit+0x1c2>
 6f0:	a9 9b       	sbis	0x15, 1	; 21
 6f2:	16 c0       	rjmp	.+44     	; 0x720 <read_digit+0x1c2>
			if(digit_flag==0) LCD_write_command(0xc0);
 6f4:	81 11       	cpse	r24, r1
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <read_digit+0x1a0>
 6f8:	80 ec       	ldi	r24, 0xC0	; 192
 6fa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
			LCD_write_char('*');
 6fe:	8a e2       	ldi	r24, 0x2A	; 42
 700:	0e 94 90 01 	call	0x320	; 0x320 <LCD_write_char>
			password[digit_flag]=KEYPAD_read();
 704:	c0 91 c5 00 	lds	r28, 0x00C5	; 0x8000c5 <digit_flag>
 708:	d0 e0       	ldi	r29, 0x00	; 0
 70a:	0e 94 68 00 	call	0xd0	; 0xd0 <KEYPAD_read>
 70e:	ca 53       	subi	r28, 0x3A	; 58
 710:	df 4f       	sbci	r29, 0xFF	; 255
 712:	88 83       	st	Y, r24
			digit_flag++;
 714:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <digit_flag>
 718:	8f 5f       	subi	r24, 0xFF	; 255
 71a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <digit_flag>
 71e:	06 c0       	rjmp	.+12     	; 0x72c <read_digit+0x1ce>
		}				
		else if(digit_flag==10){
 720:	8a 30       	cpi	r24, 0x0A	; 10
 722:	21 f4       	brne	.+8      	; 0x72c <read_digit+0x1ce>
			check_reset();
 724:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <check_reset>
			digit_flag=0;
 728:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <digit_flag>
		}
		break;
	}
	}
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	08 95       	ret

00000732 <main>:
void check_reset(void);
void read_digit(void);
void check_password(void);
int main(void)
{
    LCD_init();
 732:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_init>
	KEYPAD_init();
 736:	0e 94 5e 00 	call	0xbc	; 0xbc <KEYPAD_init>
	SETBIT(DDRC,0); // for Buzzer
 73a:	84 b3       	in	r24, 0x14	; 20
 73c:	81 60       	ori	r24, 0x01	; 1
 73e:	84 bb       	out	0x14, r24	; 20
	SETBIT(DDRC,1); // for locker
 740:	84 b3       	in	r24, 0x14	; 20
 742:	82 60       	ori	r24, 0x02	; 2
 744:	84 bb       	out	0x14, r24	; 20
	LCD_write_command(0x80);
 746:	80 e8       	ldi	r24, 0x80	; 128
 748:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_command>
	LCD_write_string("Enter Password");
 74c:	85 eb       	ldi	r24, 0xB5	; 181
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 00 02 	call	0x400	; 0x400 <LCD_write_string>
	while (1) 
    {
		for(uint8_t i=0;i<4;i++){
 754:	c0 e0       	ldi	r28, 0x00	; 0
 756:	21 c0       	rjmp	.+66     	; 0x79a <main+0x68>
		if(change_flag==0 && digit_flag==4 && GETBIT(PORTC,1)==0){
 758:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 75c:	81 11       	cpse	r24, r1
 75e:	07 c0       	rjmp	.+14     	; 0x76e <main+0x3c>
 760:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <digit_flag>
 764:	84 30       	cpi	r24, 0x04	; 4
 766:	19 f4       	brne	.+6      	; 0x76e <main+0x3c>
 768:	a9 9b       	sbis	0x15, 1	; 21
			check_password();
 76a:	0e 94 13 02 	call	0x426	; 0x426 <check_password>
			}
		while(KEYPAD_read()==0){}
 76e:	0e 94 68 00 	call	0xd0	; 0xd0 <KEYPAD_read>
 772:	88 23       	and	r24, r24
 774:	e1 f3       	breq	.-8      	; 0x76e <main+0x3c>
		read_digit();
 776:	0e 94 af 02 	call	0x55e	; 0x55e <read_digit>
		SETBIT(PORTC,0);
 77a:	85 b3       	in	r24, 0x15	; 21
 77c:	81 60       	ori	r24, 0x01	; 1
 77e:	85 bb       	out	0x15, r24	; 21
 780:	2f ef       	ldi	r18, 0xFF	; 255
 782:	89 e6       	ldi	r24, 0x69	; 105
 784:	98 e1       	ldi	r25, 0x18	; 24
 786:	21 50       	subi	r18, 0x01	; 1
 788:	80 40       	sbci	r24, 0x00	; 0
 78a:	90 40       	sbci	r25, 0x00	; 0
 78c:	e1 f7       	brne	.-8      	; 0x786 <main+0x54>
 78e:	00 c0       	rjmp	.+0      	; 0x790 <main+0x5e>
 790:	00 00       	nop
		_delay_ms(500);
		CLRBIT(PORTC,0);
 792:	85 b3       	in	r24, 0x15	; 21
 794:	8e 7f       	andi	r24, 0xFE	; 254
 796:	85 bb       	out	0x15, r24	; 21
	SETBIT(DDRC,1); // for locker
	LCD_write_command(0x80);
	LCD_write_string("Enter Password");
	while (1) 
    {
		for(uint8_t i=0;i<4;i++){
 798:	cf 5f       	subi	r28, 0xFF	; 255
 79a:	c4 30       	cpi	r28, 0x04	; 4
 79c:	e8 f2       	brcs	.-70     	; 0x758 <main+0x26>
 79e:	da cf       	rjmp	.-76     	; 0x754 <main+0x22>

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
